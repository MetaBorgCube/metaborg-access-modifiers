module compatibility/csharp/nested/protected-internal/member-recv-child-def

// derived from 3: made receiver a newly introduced parent of Def

// mem | pos - ref same def | inh - ref same def | recv parent ref: recv cannot be parent and same

// mem | pos - ref - same - def | inh - ref parent def: ref cannot be same as def and its parent class at the same time
// mem | pos - ref - same - def | inh - ref child def: ref cannot be same as def and its child class at the same time
// mem | pos - ref - same - def | inh - ref child def: ref cannot be same as def and unrelated at the same time

// mem | pos - ref - enclosing - def | inh - ref same def: enclosing class cannot be same class
test mem | pos - ref enclosing def | inh - ref parent def | pos - recv sibling def | inh - recv sub def [[
#csharp 

module M {
  class Ref {
    class Def: public Ref {
      protected internal var x = 42
    }
    public foo(i: Rec) {
      return i.x
    }
    class Rec: public Def { }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref enclosing def | inh - ref parent def | pos - recv sibling def | inh - recv sub def [[
#csharp 

module M {
  class Wrapper {
    class Ref {
      class Def: public Ref {
        protected internal var x = 42
      }
      public foo(i: Rec) {
        return i.x
      }
      class Rec: public Def { }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"


test mem | pos - ref enclosing def | inh - ref parent def | pos - recv sibling of enclosing of def | inh - recv sub def [[
#csharp 

module M {
  class Ref {
    class Def: public Ref {
      protected internal var x = 42
    }
    public foo(i: Enc.Rec) {
      return i.x
    }
    class Enc {
      class Rec: public Def { }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref enclosing def | inh - ref parent def | pos - recv sibling of enclosing of def | inh - recv sub def [[
#csharp 

module M {
  class Wrapper {
    class Ref {
      class Def: public Ref {
        protected internal var x = 42
      }
      public foo(i: Enc.Rec) {
        return i.x
      }
      class Enc {
        class Rec: public Def { }
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref enclosing def | inh - ref parent def | pos - recv sub def | inh - recv sub def [[
#csharp 

module M {
  class Ref {
    class Def: public Ref {
      protected internal var x = 42
      class Rec: public Def { }
    }
    public foo(i: Def.Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref enclosing def | inh - ref parent def | pos - recv sub def | inh - recv sub def [[
#csharp 

module M {
  class Wrapper {
    class Ref {
      class Def: public Ref {
        protected internal var x = 42
        class Rec: public Def { }
      }
      public foo(i: Def.Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

// mem | pos - ref - enclosing - def | inh - ref child def: enclosing class cannot be child class

test mem | pos - ref enclosing def | inh - ref sibling def | pos - recv sibling def | inh - recv sub def [[
#csharp 

module M {
  class Ref {
    class Def {
      protected internal var x = 42
    }
    public foo(i: Rec) {
      return i.x
    }
    class Rec: public Def { }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref enclosing def | inh - ref sibling def | pos - recv sibling def | inh - recv sub def [[
#csharp 

module M {
  class Wrapper {
    class Ref {
      class Def {
        protected internal var x = 42
      }
      public foo(i: Rec) {
        return i.x
      }
      class Rec: public Def { }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref enclosing def | inh - ref sibling def | pos - recv enclosed by sibling def | inh - recv sub def [[
#csharp 

module M {
  class Ref {
    class Def {
      protected internal var x = 42
    }
    public foo(i: Rec) {
      return i.x
    }
    class Rec: public Def { }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref enclosing def | inh - ref sibling def | pos - recv enclosed by sibling def | inh - recv sub def [[
#csharp 

module M {
  class Wrapper {
    class Ref {
      class Def {
        protected internal var x = 42
      }
      public foo(i: Enc.Rec) {
        return i.x
      }
      class Enc {
        class Rec: public Def { }
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref enclosing def | inh - ref sibling def | pos - recv sub def | inh - recv sub def [[
#csharp 

module M {
  class Ref {
    class Def {
      protected internal var x = 42
      class Rec: public Def { }
    }
    public foo(i: Def.Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref enclosing def | inh - ref sibling def | pos - recv sub def | inh - recv sub def [[
#csharp 

module M {
  class Wrapper {
    class Ref {
      class Def {
        protected internal var x = 42
        class Rec: public Def { }
      }
      public foo(i: Def.Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

// mem | pos - ref - sub - def | inh - ref same def: cannot be subclass and same
// mem | pos - ref - sub - def | inh - ref parent def: enclosing class cannot be child class

test mem | pos - ref sub def | inh - ref child def | pos - recv sibling def | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
    class Ref: public Rec {
      public foo(i: Rec) {
        return i.x
      }
    }
  }
  class Rec: public Def { }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sub def | inh - ref child def | pos - recv sibling def | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
      class Ref: public Rec {
        public foo(i: Rec) {
      	  return i.x
        }
      }
    }
    class Rec: public Def { }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"


test mem | pos - ref sub def | inh - ref child def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
    class Ref: public Rec {
      public foo(i: Rec) {
        return i.x
      }
    }
    class Rec: public Def { }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sub def | inh - ref child def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
      class Ref: public Rec {
        public foo(i: Rec) {
      	  return i.x
        }
      }
      class Rec: public Def { }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"
 
 
test mem | pos - ref sub rec | inh - ref child def | pos - recv sibling def | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
  }
  class Rec: public Def {  
    class Ref: public Rec {
      public foo(i: Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sub rec | inh - ref child def | pos - recv sibling def | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
    }
    class Rec: public Def {    
      class Ref: public Rec {
        public foo(i: Rec) {
      	  return i.x
        }
      }    
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref sub rec | inh - ref child def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
    class Rec: public Def {
      class Ref: public Rec {
        public foo(i: Rec) {
          return i.x
        }
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sub def | inh - ref child def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
      class Rec: public Def {
        class Ref: public Rec {
          public foo(i: Rec) {
      	    return i.x
          }
        }
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"


// test mem | pos - ref sub def | inh - ref child def | pos - recv sub ref | inh - recv parent ref: inheriting from inner class

// mem | pos - ref sibling def | inh - ref same def: impossible
test mem | pos - ref sibling def | inh - ref parent def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def: public Ref {
    protected internal var x = 42
  }
  class Rec: public Def { }
  class Ref {
    public foo(i: Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling def | inh - ref parent def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def: public Ref {
      protected internal var x = 42
    }
    class Rec: public Def { }
    class Ref {
      public foo(i: Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref sibling def | inh - ref parent def | pos - recv enclosed by sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def: public Ref {
    protected internal var x = 42
  }
  class Enc {
    class Rec: public Def { }
  }
  class Ref {
    public foo(i: Enc.Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling def | inh - ref parent def | pos - recv enclosed by sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def: public Ref {
      protected internal var x = 42
    }
    class Enc {
      class Rec: public Def { }
    }
    class Ref {
      public foo(i: Enc.Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref sibling def | inh - ref sibling def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
  }
  class Rec: public Def { }
  class Ref {
    public foo(i: Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling def | inh - ref sibling def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
    }
    class Rec: public Def { }
    class Ref {
      public foo(i: Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref sibling def | inh - ref sibling def | pos - recv enclosed by sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
  }
  class Enc {
    class Rec: public Def { }
  }
  class Ref {
    public foo(i: Enc.Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling def | inh - ref sibling def | pos - recv enclosed by sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
    }
    class Enc {
      class Rec: public Def { }
    }
    class Ref {
      public foo(i: Enc.Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref sibling def | inh - ref to enclosing sibling def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Enc {
    class Def {
      protected internal var x = 42
    }
    class Rec: public Def { }
  }
  class Ref {
    public foo(i: Enc.Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling to enclosing def | inh - ref sibling def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Enc {
      class Def {
        protected internal var x = 42
      }
      class Rec: public Def { }
    }
    class Ref {
      public foo(i: Enc.Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"



test mem | pos - ref sibling def | inh - ref child def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
  }
  class Rec: public Def { }
  class Ref: public Def {
    public foo(i: Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling def | inh - ref child def | pos - recv sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
    }
    class Rec: public Def { }
    class Ref: public Def {
      public foo(i: Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | pos - ref sibling def | inh - ref child def | pos - recv enclosed by sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Def {
    protected internal var x = 42
  }
  class Enc {
    class Rec: public Def { }
  }
  class Ref: public Def {
    public foo(i: Enc.Rec) {
      return i.x
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

test mem | wrapped | pos - ref sibling def | inh - ref child def | pos - recv enclosed by sibling ref | inh - recv parent ref [[
#csharp 

module M {
  class Wrapper {
    class Def {
      protected internal var x = 42
    }
    class Enc {
      class Rec: public Def { }
    }
    class Ref: public Def {
      public foo(i: Enc.Rec) {
        return i.x
      }
    }
  }
}
]]
run csharp-test-transform
transform "Test C# Compatibility"

