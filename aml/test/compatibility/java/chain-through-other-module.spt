module chain-through-other-module

// Correct dealing with 'internal' on other module

test chain loop - internal - self [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public p2.B {
  public foo(c: C) {
  	return c.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"

test chain loop - internal - parent [[
#java

module p1 {
import p2
class A {
  internal var x = 42
}
class C : public B {
  public foo(b: B) {
  	return b.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"

test chain loop - internal - root [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public B {
  public foo(a: A) {
  	return a.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"

test chain loop - protected - self [[
#java

module p1 {
class A {
  protected internal var x = 42
}
class C : public p2.B {
  public foo(c: C) {
  	return c.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"

test chain loop - protected - parent [[
#java

module p1 {
import p2
class A {
  protected internal var x = 42
}
class C : public B {
  public foo(b: B) {
  	return b.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"

test chain loop - protected - root [[
#java

module p1 {
class A {
  protected internal var x = 42
}
class C : public B {
  public foo(a: A) {
  	return a.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - internal - self -- external class [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public p2.B {
}
class X {
  public foo(c: C) {
  	return c.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - internal - parent -- external class [[
#java

module p1 {
import p2
class A {
  internal var x = 42
}
class C : public p2.B {
}
class X {
  public foo(b: B) {
  	return b.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - internal - root -- external class [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public p2.B {
}
class X {
  public foo(a: A) {
  	return a.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - protected - self -- external class [[
#java

module p1 {
class A {
  protected internal var x = 42
}
class C : public p2.B {
}
class X {
  public foo(c: C) {
  	return c.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - protected - parent -- external class [[
#java

module p1 {
import p2
class A {
  protected internal var x = 42
}
class C : public p2.B {
}
class X {
  public foo(b: B) {
  	return b.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - protected - root -- external class [[
#java

module p1 {
class A {
  protected internal var x = 42
}
class C : public p2.B {
}
class X {
  public foo(a: A) {
  	return a.x
  }
}
}
module p2 {
class B : public p1.A { }

}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - internal - self -- external module [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public p2.B {
}
}
module p2 {
import p1
class B : public p1.A { }

class X {
  public foo(c: C) {
  	return c.x
  }
}
}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - internal - parent -- external module [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public p2.B {
}
}
module p2 {
import p1
class B : public p1.A { }

class X {
  public foo(b: B) {
  	return b.x
  }
}
}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - internal - root -- external module [[
#java

module p1 {
class A {
  internal var x = 42
}
class C : public p2.B {
}
}
module p2 {
import p1
class B : public p1.A { }

class X {
  public foo(a: A) {
  	return a.x
  }
}
}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - protected - self -- external module [[
#java

module p1 {
class A {
  protected internal var x = 42
}
class C : public p2.B {
}
}
module p2 {
import p1
class B : public p1.A { }

class X {
  public foo(c: C) {
  	return c.x
  }
}
}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - protected - parent -- external module [[
#java

module p1 {
import p2
class A {
  protected internal var x = 42
}
class C : public p2.B {
}
}
module p2 {
import p1
class B : public p1.A { }

class X {
  public foo(b: B) {
  	return b.x
  }
}
}
]]
run java-test-transform
transform "Test Java Compatibility"


test chain loop - protected - root -- external module [[
#java

module p1 {
class A {
  protected internal var x = 42
}
class C : public p2.B {
}
}
module p2 {
import p1
class B : public p1.A { }

class X {
  public foo(a: A) {
  	return a.x
  }
}
}
]]
run java-test-transform
transform "Test Java Compatibility"


// Correct dealing with lexical access on subclass in other module

run java-test-transform
transform "Test Java Compatibility"
test public -- mem -- subsub -- sub -- other module [[
module p {
class A {
  public var x = 42
}
}
module q {
import p
class B : public A {}
}
module r {
import q
import o
class C : public B {
  public foo(d: D) {
    return d.x
  }
}
}
module o {
import r
class D : public C { }
}
]]
run java-test-transform
transform "Test Java Compatibility"


test public -- mem -- sub -- sub -- other module [[
module p {
class A {
  public var x = 42
}
}
module q {
import p
import r
class B : public A {
  public foo(c: C) {
    return c.x
  }
}
}
module r {
import q
class C : public B { }
}
]]
run java-test-transform
transform "Test Java Compatibility"


test internal -- mem -- sub -- sub -- other module [[
module p {
class A {
  internal var x = 42
}
}
module q {
import p
import r
class B : public A {
  public foo(c: C) {
    return c.x
  }
}
}
module r {
import q
class C : public B { }
}
]]
run java-test-transform
transform "Test Java Compatibility"


run java-test-transform
transform "Test Java Compatibility"
test internal -- mem -- subsub -- sub -- other module [[
module p {
class A {
  internal var x = 42
}
}
module q {
import p
class B : public A {}
}
module r {
import q
import o
class C : public B {
  public foo(d: D) {
    return d.x
  }
}
}
module o {
import r
class D : public C { }
}
]]
run java-test-transform
transform "Test Java Compatibility"


test protected -- mem -- sub -- sub -- other module [[
module p {
class A {
  protected internal var x = 42
}
}
module q {
import p
import r
class B : public A {
  public foo(c: C) {
    return c.x
  }
}
}
module r {
import q
class C : public B { }
}
]]
run java-test-transform
transform "Test Java Compatibility"

run java-test-transform
transform "Test Java Compatibility"
test protected -- mem -- subsub -- sub -- other module [[
module p {
class A {
  protected internal var x = 42
}
}
module q {
import p
class B : public A {}
}
module r {
import q
import o
class C : public B {
  public foo(d: D) {
    return d.x
  }
}
}
module o {
import r
class D : public C { }
}
]]
run java-test-transform
transform "Test Java Compatibility"



test private -- mem -- sub -- sub -- other module [[
module p {
class A {
  private var x = 42
}
}
module q {
import p
import r
class B : public A {
  private foo(c: C) {
    return c.x
  }
}
}
module r {
import q
class C : public B { }
}
]]
run java-test-transform
transform "Test Java Compatibility"

run java-test-transform
transform "Test Java Compatibility"
test private -- mem -- subsub -- sub -- other module [[
module p {
class A {
  private var x = 42
}
}
module q {
import p
class B : public A {}
}
module r {
import q
import o
class C : public B {
  private foo(d: D) {
    return d.x
  }
}
}
module o {
import r
class D : public C { }
}
]]
run java-test-transform
transform "Test Java Compatibility"