module lib/start

imports
  lib/lex

// Program

context-free sorts

  Program

context-free syntax

  Program.Program = <
    <Options>

    <{ModuleOrClassOrImport "\n"}*>
  >

// Type Checker Configuration

context-free sorts

  Options

  ExposureMode
  ExposureRange

  InternalAccess
  ProtectedAccess
  PrivateAccess

context-free syntax

  Options.JavaOpt   = <#java>
  Options.CSharpOpt = <#csharp>
  Options.RustOpt   = <#rust>

  Options.Options = <
    <ExposureMode>
    <ExposureRange>
    <InternalAccess>
    <ProtectedAccess>
    <PrivateAccess>
  >

  ExposureMode.NoExposureMode    		= <>
  ExposureMode.IncludeSubmodules 		= <#exposure-mode: include-submodules>
  ExposureMode.DirectChildOnly  		= <#exposure-mode: direct-child-only>

  ExposureRange.NoExposureRange  		= <>
  ExposureRange.All              		= <#exposure-range: all>
  ExposureRange.Ancestors        		= <#exposure-range: ancestors>

  InternalAccess.NoInternalAccess   	= <>
  InternalAccess.AllowInternalAccess    = <#internal-access: allow>
  InternalAccess.IfChainInModule        = <#internal-access: if-chain-in-module>

  ProtectedAccess.NoProtectedAccess 	= <>
  ProtectedAccess.IfInstanceOfDefining  = <#protected-access: if-instance-of-defining>
  ProtectedAccess.IfInstanceOfCurrent   = <#protected-access: if-instance-of-current>

  PrivateAccess.NoPrivateAccess 	    = <>
  PrivateAccess.IfExactType             = <#private-access: if-exact-type>
  PrivateAccess.IfSubtypeOfCurrent      = <#private-access: if-instance-of-current>

// Modules, Classes and Imports

context-free sorts

  ModuleOrClassOrImport
  Module
  Class
  Import

context-free syntax

  ModuleOrClassOrImport = Module
  ModuleOrClassOrImport = Class
  ModuleOrClassOrImport = Import

  Module.Module = <module <ID> {
    <{ModuleOrClassOrImport "\n"}*>
  }>

  Class.Class = <class <ID> <Extends> {
    <{MemberDecl "\n"}*>
  }>
  
  Import.Import = <import <QId>>


// Extends clauses

context-free sorts

  Extends
  ExtendsClause

context-free syntax

  Extends.NoExtends 			= <>
  Extends.Extends 				= <: <{ExtendsClause ", "}+>>

  ExtendsClause.ExtendsClause 	= <<AccessModifier> <QId>>


// Member decls
  
context-free sorts

  MemberDecl
  MethodModifier
  Arg

context-free syntax

  MemberDecl.Field  = <<AccessModifier> var <ID> = <Expr>>
  MemberDecl.Method = <<AccessModifier> <MethodModifier> <ID>(<{Arg ","}*>) {
    <{Stmt "\n"}*>
    return <Expr>
  }>
 

  MethodModifier.NoMethodModifier	= <>
  MethodModifier.Override  			= <override>
  MethodModifier.New  				= <new>

  Arg.Arg   = <<ID> : <Type>>


// Statements & Expressions

context-free sorts

  Stmt Expr LHS

context-free syntax

  Stmt.ExprStmt		= <<Expr>;>
  Stmt.Assign		= <<LHS> := <Expr>;>

  LHS.Var           = QId
  
  Expr 				= LHS
  Expr.NewInstance  = <new <ID>()>
  Expr.Plus 		= <<Expr> + <Expr>> {left}
  Expr.IntLit       = INT

  Expr.Invoke       = <<ID>(<{Expr ", "}*>)>
  Expr.QInvoke      = <<Expr>.<ID>(<{Expr ", "}*>)>

context-free priorities

  LHS.Var >
  Expr.Plus


// Types

context-free sorts

  Type

context-free syntax

  Type.IntT = <int>
  Type.RefT = <<ID>>


// Access modifiers

context-free sorts

  AccessModifier
  ModuleRef
  ModuleRefList-Star
  ModuleRefList-Plus

context-free syntax

  AccessModifier.Public 				= <public>          							// Everywhere
  AccessModifier.Protected 				= <protected>    								// All subclasses

  AccessModifier.InternalSelf  			= <internal>     								// Own module only
  AccessModifier.Internal  				= <internal(<ModuleRefList-Star>)>     			// Exposed modules only

  AccessModifier.ProtectedInternalSelf	= <protected internal> 							// Subclasses and classes in own module
  AccessModifier.ProtectedInternal    	= <protected internal(<ModuleRefList-Star>)> 	// Subclasses and classes in exposed modules

  AccessModifier.PrivateProtectedSelf	= <private protected> 							// Only subclasses in the own module
  AccessModifier.PrivateProtected    	= <private protected(<ModuleRefList-Star>)> 	// Only subclasses in the exposed modules
 
  AccessModifier.Private        		= <private> 									// Only own class

  ModuleRef.Self 		= <self>
  ModuleRef.ModuleRef 	= <<QId>>

  
  ModuleRefList-Star.MRLEmpty    = <>
  ModuleRefList-Star.MRLNonEmpty = <<ModuleRef><ModuleRefList-Plus>>

  ModuleRefList-Plus.MRLNil  = <>
  ModuleRefList-Plus.MRLCons  = <, <ModuleRef><ModuleRefList-Plus>>


template options

  keyword -/- [a-zA-Z0-9]
  ID = keyword {reject}
