module statics/methods

imports

  signatures/lib/start-sig

  statics/base
  statics/access
  statics/types
  statics/options

signature
  
  sorts METHOD constructors
    METHOD : list(TYPE) * TYPE -> METHOD

  sorts
    METHOD_DECL  = (METHOD * ACCESS)
    METHOD_DECLS = list((path * (ID * METHOD_DECL)))

  relations
    method : ID -> METHOD_DECL

rules

  declareMethod: scope * ID * list(TYPE) * TYPE * ACCESS
  declareMethod(s, x, T_args, T_ret, ACC) :- {M}
    resolveLocalMethod(s, x) == [_] | error $[Duplicate Declaration of Method [x].],
    !method[x, (M@METHOD(T_args, T_ret), ACC)] in s,
    @x.type := M.

rules // locally declared methods (for duplication checking)

  resolveLocalMethod: scope * ID -> METHOD_DECLS

  resolveLocalMethod(s, x) = R :-
    query method
      filter e
        and { x' :- x' == x }
      in s |-> R.

rules // references (with/without) receivers

  resolveLexicalMethod : scope * ID -> METHOD
  resolveMemberMethod  : scope * ID -> METHOD

  resolveLexicalMethod(s, x) = T :- {x' p ACC}
    query method
      filter
        LEX*
        (EXTEND | EXTEND_PROT | EXTEND_PRIV)*
      and
        { x'' :- x'' == x }
      min
        LEX < EXTEND,
        LEX < EXTEND_PROT,
        LEX < EXTEND_PRIV,
        
        $ < LEX
      in s |-> [(p, (x', (T, ACC)))]
      | error $[Reference to method [x] is ambiguous.],
    lexicalAccessOk(p, ACC)
      | error $[Method [x] is not visible.],
    @x.ref := x',
    @x.type := T.

  resolveMemberMethod(s, x) = T :- {x' p ACC}
    query method
      filter
        (EXTEND | EXTEND_PROT | EXTEND_PRIV)*
      and
        { x'' :- x'' == x }
      min
        $ < EXTEND,
        $ < EXTEND_PROT,
        $ < EXTEND_PRIV
      in s |-> [(p, (x', (T, ACC))) | _]
      | error $[Reference to method [x] is ambiguous.],
    memberAccessOk(s, p, ACC)
      | error $[Method [x] is not visible.],
    @x.ref := x',
    @x.type := T.

rules

  methodModOk : scope * AccessModifier * ACCESS * MethodModifier * ID * list(TYPE) * TYPE

  methodModOk(s, _, _, n@NoMethodModifier(), x, _, _) :-
    resolveParentMethods(s, x) == []  | error $[Overriding Parent Method.] @n.

  methodModOk(s, _, _, n@New(), x, _, _) :- {M}
    resolveParentMethods(s, x) == M,
    try { M != [] } | error $[No method found to override] @n.

  methodModOk(s, acc, ACC, o@Override(), x, Ts, T) :- {M}
    resolveParentMethods(s, x) == M,
    try { M != [] } | error $[No method found to override] @o,
    overridesCompat(s, o, acc, ACC, METHOD(Ts, T), M).

rules

  overrideCompat : scope * MethodModifier * AccessModifier * ACCESS * METHOD * (path * (ID * METHOD_DECL)) 
  overridesCompat maps overrideCompat(*, *, *, *, *, list(*))

  overrideCompat(s, mod, acc, ACC_NEW, M, (p, (_, (M', ACC_PARENT)))) :-
    accessibilityElevationOk(s, dst(p), ACC_NEW, ACC_PARENT) 
      | error $[Cannot restrict access level of overriding method to [acc].] @acc,
    overrideOk(M, M').

rules

  methodDeclOk: scope * ACCESS * ID * list(TYPE) * TYPE

  methodDeclOk(s, ACC, x, T_args, T) :-
    declareMethod(s, x, T_args, T, ACC).

rules // resolve ignore visibility

  resolveParentMethods: scope * ID -> METHOD_DECLS
  childVisible: scope * METHOD_DECLS -> METHOD_DECLS

  resolveParentMethods(s, x) = childVisible(s, R) :-
    query method
      filter
        ( EXTEND | EXTEND_PROT | EXTEND_PRIV)
        ( EXTEND | EXTEND_PROT )*
      and
        { x' :- x' == x }
      min
        $ < EXTEND,
        $ < EXTEND_PROT
      in s |-> R.

  childVisible(_, []) = [].

  childVisible(s, [d@(p, (_, (_, UNRESTRICTED()))) | ds]) = [d | childVisible(s, ds)].  
  childVisible(s, [d@(p, (_, (_, SUBCLASS_OR_MODULES(_)))) | ds]) = [d | childVisible(s, ds)].  
  // TODO: how to deal with overriding internal methods?
  //   allow when ancestor is in same package?
  //         when all ancestors up to the definition are in the same package?
  childVisible(s, [d@(p, (_, (_, _))) | ds]) = childVisible(s, ds).

rules

  accessibilityElevationOk : scope * /* target scope */ scope * /* new access */ACCESS * /* overridden method access */ACCESS 

  // Can always elevate to Public
  accessibilityElevationOk(s, s_tgt, UNRESTRICTED(), _).
  accessibilityElevationOk(s, s_tgt, A_new, UNRESTRICTED()) :- {L}
    // Only allowed if inheritance chain restricts visibility to `protected`.
    lexicalPaths(s, s_tgt) == (_, L),
    try { L != PUB() }.

  accessibilityElevationOk(s, s_tgt, A_new, A_old) :- {MV PL UC new_mods old_mods}
    new_mods == modulesOfAccess(A_new),
    old_mods == modulesOfAccess(A_old),
    lexicalPaths(s, s_tgt) == (MV, PL),
    // try { PL != PUB() },
    // condition: all modules in `old_mods` must be covered by `new_mods`.
    // we query for the inverse: find all modules that are in `old_mods`, but that do not have a parent in `new_mods`
    query ()
      filter MODULE
        and { m :- exposedToModules(m, new_mods) == [] }
      in old_mods |-> UC,
    // MV is empty OR UC is empty
    try { (MV, UC, PL) != ([_|_], [_|_], PUB()) }.

  // Reasoning behind `try { (a, b) != (c, d) }` patterns is that they are equivalent to
  //                  `try { a != c OR b != d }`, mimicing an OR-operator.

rules

  overrideOk: METHOD * METHOD

  overrideOk(METHOD(T_args, T_ret), METHOD(T_args', T_ret')) :-
    allContravariant(T_args, T_args') | error $[Method argument count does not match overridden method.],
    covariant(T_ret, T_ret').

  covariant: TYPE * TYPE
  contravariant: TYPE * TYPE
  
  allCovariant maps covariant(list(*), list(*))
  allContravariant maps contravariant(list(*), list(*))

  covariant(T, T')     :- subtype(T, T') | error $[[T] is not a subtype of [T'].].
  contravariant(T, T') :- subtype(T', T) | error $[[T'] is not a subtype of [T].].
    
  