module statics/methods

imports

  signatures/lib/start-sig

  statics/base
  statics/access
  statics/types

signature
  
  sorts METHOD constructors
    METHOD : list(TYPE) * TYPE -> METHOD

  sorts
    METHOD_DECL  = (METHOD * ACCESS)
    METHOD_DECLS = list((path * (ID * METHOD_DECL)))

  relations
    method : ID -> METHOD_DECL

rules

  declareMethod: scope * ID * list(TYPE) * TYPE * ACCESS
  declareMethod(s, x, T_args, T_ret, ACC) :-
    resolveLocalMethod(s, x) == [_] | error $[Duplicate Declaration of Method [x].],
    !method[x, (METHOD(T_args, T_ret), ACC)] in s.

rules // locally declared methods (for duplication checking)

  resolveLocalMethod: scope * ID -> METHOD_DECLS

  resolveLocalMethod(s, x) = R :-
    query method
      filter e
        and { x' :- x' == x }
      in s |-> R.

rules // references (with/without) receivers

  resolveLexicalMethod : scope * ID -> METHOD
  resolveMemberMethod  : scope * ID -> METHOD

  resolveLexicalMethod(s, x) = T :- {x' p ACC}
    query method
      filter
        LEX*
        (EXTEND | EXTEND_PROT | EXTEND_PRIV)*
      and
        { x' :- x' == x }
      min
        LEX < EXTEND,
        LEX < EXTEND_PROT,
        LEX < EXTEND_PRIV,
        
        $ < LEX
      in s |-> [(p, (x', (T, ACC)))]
      | error $[Reference to method [x] is ambiguous.],
    lexicalAccessOk(p, ACC)
      | error $[Method [x] is not visible.],
    @x.ref := x'.

  resolveMemberMethod(s, x) = T :- {x' p ACC}
    query method
      filter
        (EXTEND | EXTEND_PROT | EXTEND_PRIV)*
      and
        { x' :- x' == x }
      min
        $ < EXTEND,
        $ < EXTEND_PROT,
        $ < EXTEND_PRIV
      in s |-> [(p, (x', (T, ACC))) | _]
      | error $[Reference to method [x] is ambiguous.],
    memberAccessOk(s, p, ACC)
      | error $[Method [x] is not visible.],
    @x.ref := x'.

rules // resolve ignore visibility

  resolveParentMethods: scope * ID -> METHOD_DECLS
  childVisible: scope * METHOD_DECLS -> METHOD_DECLS

  resolveParentMethods(s, x) = childVisible(s, R) :-
    query method
      filter
        ( EXTEND | EXTEND_PROT | EXTEND_PRIV)
        ( EXTEND | EXTEND_PROT )*
      and
        { x' :- x' == x }
      min
        $ < EXTEND,
        $ < EXTEND_PROT
      in s |-> R.

  childVisible(_, []) = [].

  childVisible(s, [d@(p, (_, (_, MEMBER(_, SUBCLASSACCESS())))) | ds]) = [d | childVisible(s, ds)].  
  // TODO: how to deal with overriding internal methods?
  //   allow when ancestor is in same package?
  //         when all ancestors up to the definition are in the same package?
  childVisible(s, [d@(p, (_, (_, MEMBER(_, _)))) | ds]) = childVisible(s, ds).

rules

  accessibilityElevationOk : scope * /* target scope */ scope * /* new access */ACCESS * /* overridden method access */ACCESS 
  protIntElevationOk : scope * list(())

  // Can always elevate to Public
  accessibilityElevationOk(s, s_tgt, MEMBER(new_mods, SUBCLASSACCESS()), MEMBER(old_mods, _)) :- {MV UC}
    memberPaths(s, s_tgt) == MV,
    // condition: all modules in `old_mods` must be covered by `new_mods`.
    // we query for the inverse: find all modules that are in `old_mods`, but that do not have a parent in `new_mods`
    query ()
      filter MODULE
        and { m :- 
          query ()
            filter MODULE
              and { m' :-
                query ()
                  filter LEX*
                    and { m'' :- m'' == m' }
                  in m |-> [_|_]			  
			  }
            in new_mods |-> []        
        }
      in old_mods |-> UC,
    // MV is empty OR UC is empty
    try { (MV, UC) != ([_|_], [_|_]) }.

  // Reasoning behind `try { (a, b) != (c, d) }` patterns is that they are equivalent to
  // 				  `try { a != c OR b != d }`, mimicing an OR-operator.

rules

  overrideOk: METHOD * METHOD

  overrideOk(METHOD(T_args, T_ret), METHOD(T_args', T_ret')) :-
    allContravariant(T_args, T_args') | error $[Method argument count does not match overridden method.],
    covariant(T_ret, T_ret').

  covariant: TYPE * TYPE
  contravariant: TYPE * TYPE
  
  allCovariant maps covariant(list(*), list(*))
  allContravariant maps contravariant(list(*), list(*))

  covariant(T, T')     :- subtype(T, T') | error $[[T] is not a subtype of [T'].].
  contravariant(T, T') :- subtype(T', T) | error $[[T'] is not a subtype of [T].].
