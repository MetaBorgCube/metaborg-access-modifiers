module statics/access

imports

  statics/base
  statics/modules
  statics/classes

rules

  lexicalPaths   : scope * scope -> list((path * scope))
  memberPaths    : scope * scope -> list((path * scope))
  
  lexicallyVisible : path
  memberVisible    : path

  nonEmptyPathList : list((path * scope))

  lexicalPaths(s, s_tgt) = R :-
    query () 
      filter
        LEX*
        EXTEND_PRIV?
        (EXTEND | EXTEND_PROT)*
      and
      	{ s :- s == s_tgt }
      in s |-> R.

  memberPaths(s, s_tgt) = R :-
    query () 
      filter
        EXTEND*
      and
      	{ s :- s == s_tgt }
      in s |-> R.

  lexicallyVisible(p) :- nonEmptyPathList(lexicalPaths(src(p), dst(p))).
  memberVisible(p)    :- nonEmptyPathList(memberPaths(src(p), dst(p))).
  nonEmptyPathList([_|_]).
  nonEmptyPathList([]) :- false.

rules

  accessModifierToAccess : scope * AccessModifier -> ACCESS
  resolveModRef: scope * ModuleRef -> scope
  resolveModRefs maps resolveModRef(*, list(*)) = list(*)
  
  accessModifierToAccess(s, Public()) 					= memberAccess([rootScope(s)], SUBCLASSACCESS()).
  accessModifierToAccess(s, ProtectedInternal(modRefs)) = memberAccess(resolveModRefs(s, modRefs), SUBCLASSACCESS()).
  accessModifierToAccess(s, Internal(modRefs)) 			= memberAccess(resolveModRefs(s, modRefs), NOSUBCLASSACCESS()).
  accessModifierToAccess(s, Protected()) 				= memberAccess([], SUBCLASSACCESS()).
  accessModifierToAccess(s, PrivateInternal(modRefs))   = memberAccess(resolveModRefs(s, modRefs), MODULESUBCLASSACCESS()).
  accessModifierToAccess(s, Private()) 					= memberAccess([], NOSUBCLASSACCESS()).

  resolveModRef(s, Self()) = thisMod(s).
  resolveModRef(s, ModuleRef(qid)) = resolveMod(s, qid).

rules

  lexicalAccessOk :         path * ACCESS
  memberAccessOk  : scope * path * ACCESS

  lexicalAccessOk(p, LOCAL()).

  lexicalAccessOk(p, MEMBER(s_mods, SUBCLASSACCESS())) :-
    lexicallyVisible(p).

  lexicalAccessOk(p, MEMBER(s_mods, MODULESUBCLASSACCESS())) :-
    lexicallyVisible(p),
    allExposedTo(p, s_mods).

  lexicalAccessOk(p, MEMBER(s_mods, NOSUBCLASSACCESS())) :-
    thisClass(src(p)) == thisClass(dst(p)).


  memberAccessOk(_, _, LOCAL()).

  memberAccessOk(_, p, MEMBER(s_mods, MODULESUBCLASSACCESS())) :-
    false.

  memberAccessOk(s, p, MEMBER(mods, _)) :-
    memberVisible(p),
    nonEmptyPathList(exposedTo(s, mods)).

rules

  allExposedTo : path * scope
  exposedTo: /*s_src*/scope * /*modules*/scope -> list((path * scope))

  allExposedTo(_PathEmpty(_), _).
  allExposedTo(_PathStep(p, _, s), s_mods) :-
    nonEmptyPathList(exposedTo(s, s_mods)),
    allExposedTo(p, s_mods).

  exposedTo(s, s_mods) = MS :-
    query ()
      filter MODULE
        and { m :- 
          query ()
		    filter LEX* and { m' :- m' == m }
		    in s |-> [_|_]
		}
      in s_mods |-> MS.
