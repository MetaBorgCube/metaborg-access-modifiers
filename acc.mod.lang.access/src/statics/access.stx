module statics/access

imports

  statics/base
  statics/modules
  statics/classes
  statics/options

signature
  sorts PATH_LIST = list((path * scope))

  name-resolution
    labels
      MODULE                // module included in access

  sorts ACCESS constructors
    LOCAL                   :          ACCESS
    UNRESTRICTED            :          ACCESS
    SUBCLASS_OR_MODULES     : scope -> ACCESS
    SUBCLASS_IN_MODULES     : scope -> ACCESS
    MODULES                 : scope -> ACCESS

rules

  subclassInModules: list(scope) -> ACCESS
  subclassOrModules: list(scope) -> ACCESS
  modules: list(scope) -> ACCESS

  subclassOrModules(mods) = SUBCLASS_OR_MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  subclassInModules(mods) = SUBCLASS_IN_MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  modules(mods) = MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  moduleAccessOk: scope * scope
  moduleAccessesOk maps moduleAccessOk(*, list(*))

  moduleAccessOk(s, s_mod) :-
    s -MODULE-> s_mod.

rules

  modulesOfAccess: ACCESS -> scope
  modulesOfAccess(UNRESTRICTED()) = new.
  modulesOfAccess(SUBCLASS_OR_MODULES(s)) = s.
  modulesOfAccess(SUBCLASS_IN_MODULES(s)) = s.
  modulesOfAccess(MODULES(s)) = s.

rules

  lexicalPaths   : scope * scope -> PATH_LIST
  memberPaths    : scope * scope -> PATH_LIST
  
  lexicallyVisible : path
  memberVisible    : path

  nonEmpty : PATH_LIST

  lexicalPaths(s, s_tgt) = R :-
    query () 
      filter
        LEX*
        EXTEND_PRIV?
        (EXTEND | EXTEND_PROT)*
      and
        { s' :- s' == s_tgt }
      in s |-> R.

  memberPaths(s, s_tgt) = R :-
    query () 
      filter
        EXTEND*
      and
        { s' :- s' == s_tgt }
      in s |-> R.

  lexicallyVisible(p) :- nonEmpty(lexicalPaths(src(p), dst(p))).
  memberVisible(p)    :- nonEmpty(memberPaths(src(p), dst(p))).

  nonEmpty([_|_]).
  nonEmpty([]) :- false.

rules

  accessModifierToAccess : scope * AccessModifier -> ACCESS
  resolveModRef: scope * ModuleRef -> scope
  resolveModRefs maps resolveModRef(*, list(*)) = list(*)
  modRefOk: scope * scope * ExposureRange * QId
  
  accessModifierToAccess(s, Public())                   = UNRESTRICTED().
  accessModifierToAccess(s, ProtectedInternal(modRefs)) = subclassOrModules(resolveModRefs(s, modRefs)).
  accessModifierToAccess(s, Internal(modRefs))          = modules(resolveModRefs(s, modRefs)).
  accessModifierToAccess(s, Protected())                = subclassOrModules([]).
  accessModifierToAccess(s, PrivateInternal(modRefs))   = subclassInModules(resolveModRefs(s, modRefs)).
  accessModifierToAccess(s, Private())                  = modules([]).

  resolveModRef(s, Self()) = thisMod(s).
  resolveModRef(s, ModuleRef(qid)) = s_mod :-
    s_mod == resolveMod(s, qid),
    modRefOk(s, s_mod, resolveExposureRange(s), qid).

  modRefOk(s, s_mod, All(), _).
  modRefOk(s, s_mod, Ancestors(), id) :-
    isEnclosingScope(s, s_mod)
    | error $[Not allowed to expose member to non-ancestor module [id].].

rules

  lexicalAccessOk               : path * ACCESS
  // protected internal lexicall access
  lexProtectedInternalAccessOk  : PATH_LIST * LexicalInternal * path * /* exposedModules */scope
  // internal lexical access
  lexInternalAccessOk           : scope * scope * LexicalInternal * path * /* exposedModules */scope


  lexicalAccessOk(p, LOCAL()).
  lexicalAccessOk(p, UNRESTRICTED()) :-
    lexicallyVisible(p).

  lexicalAccessOk(p, SUBCLASS_OR_MODULES(s_mods)) :-
    lexProtectedInternalAccessOk(lexicalPaths(src(p), dst(p)), resolveLexicalInternal(src(p)), p, s_mods).

  lexicalAccessOk(p, SUBCLASS_IN_MODULES(s_mods)) :-
    lexicallyVisible(p),
    allExposedTo(p, s_mods).

  lexicalAccessOk(p, MODULES(s_mods)) :-
    lexInternalAccessOk(src(p), dst(p), resolveLexicalInternal(src(p)), p, s_mods).


  lexProtectedInternalAccessOk([_|_], _, _, _).

  lexProtectedInternalAccessOk([], AllowLexicalInternal(), p, s_mods) :-
    exposedTo(src(p), s_mods).

  lexProtectedInternalAccessOk([], IfChainInModule(), p, s_mods) :-
    allExposedTo(p, s_mods).

  lexProtectedInternalAccessOk([], DenyLexicalInternal(), _, _) :-
    false.


  lexInternalAccessOk(s_cls, s_cls, _, _, _).

  lexInternalAccessOk(_, _, AllowLexicalInternal(), p, s_mods) :-
    exposedTo(src(p), s_mods).

  lexInternalAccessOk(_, _, IfChainInModule(), p, s_mods) :-
    allExposedTo(p, s_mods).

  lexInternalAccessOk(_, _, DenyLexicalInternal(), _, _) :-
    false.

rules // member access

  memberAccessOk       : scope * path * ACCESS
  moduleMemberAccessOk : /* Exposure paths */PATH_LIST * MemberProtected * scope * path

  memberAccessOk(_, p, UNRESTRICTED()) :-
    memberVisible(p).

  memberAccessOk(s, p, SUBCLASS_OR_MODULES(mods)) :-
    memberVisible(p),
    exposedTo(s, mods).

  memberAccessOk(s, p, SUBCLASS_IN_MODULES(s_mods)) :-
    false.

  memberAccessOk(s, p, MODULES(mods)) :-
    moduleMemberAccessOk(
      exposedToModules(s, mods),
      resolveMemberProtected(src(p)), 
      s,
      p
    ).

  moduleMemberAccessOk([_|_], _, _, _).

  moduleMemberAccessOk(_, DenyMemberProtected(), _, _) :-
    false.

  moduleMemberAccessOk(W, AllowMemberProtected(), s, p) :-
    thisClass(s) == dst(p). // private access

rules

  allExposedTo : path * scope
  exposedTo: /*s_src*/scope * /*modules*/scope
  exposedToModules: /*s_src*/scope * /*modules*/scope -> PATH_LIST
  isExposedTo: scope * scope * ExposureMode

  allExposedTo(_PathEmpty(_), _). /* same class visibility is always allowed */
  allExposedTo(_PathStep(p, _, s), s_mods) :-
    exposedTo(s, s_mods),
    allExposedTo(p, s_mods).

  exposedTo(s, s_mods) :-
    nonEmpty(exposedToModules(s, s_mods)).

  exposedToModules(s, s_mods) = MS:- {M}
    M == resolveExposureMode(s),

    query ()
      filter MODULE
        and { m :- isExposedTo(s, m, M) }
      in s_mods |-> MS.

  isExposedTo(s, m, DirectChildOnly()) :-
    thisMod(s) == m.

  isExposedTo(s, m, IncludeSubmodules()) :-
    isEnclosingScope(s, m).
      
      