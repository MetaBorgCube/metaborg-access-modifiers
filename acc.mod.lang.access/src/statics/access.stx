module statics/access

imports

  statics/base
  statics/modules
  statics/classes
  statics/options

signature
  sorts PATH_LIST = list((path * scope))

  name-resolution
    labels
      MODULE                // module included in access

  sorts ACCESS constructors
    LOCAL                   :          ACCESS
    UNRESTRICTED            :          ACCESS
    SUBCLASS_OR_MODULES     : scope -> ACCESS
    SUBCLASS_IN_MODULES     : scope -> ACCESS
    MODULES                 : scope -> ACCESS

rules

  subclassInModules: list(scope) -> ACCESS
  subclassOrModules: list(scope) -> ACCESS
  modules: list(scope) -> ACCESS

  subclassOrModules(mods) = SUBCLASS_OR_MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  subclassInModules(mods) = SUBCLASS_IN_MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  modules(mods) = MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  moduleAccessOk: scope * scope
  moduleAccessesOk maps moduleAccessOk(*, list(*))

  moduleAccessOk(s, s_mod) :-
    s -MODULE-> s_mod.

rules

  modulesOfAccess: ACCESS -> scope
  modulesOfAccess(UNRESTRICTED()) = new.
  modulesOfAccess(SUBCLASS_OR_MODULES(s)) = s.
  modulesOfAccess(SUBCLASS_IN_MODULES(s)) = s.
  modulesOfAccess(MODULES(s)) = s.

rules

  lexicalPaths   : scope * scope -> PATH_LIST
  memberPaths    : scope * scope -> PATH_LIST
  
  lexicallyVisible : path
  memberVisible    : path

  nonEmpty : PATH_LIST

  lexicalPaths(s, s_tgt) = R :-
    query () 
      filter
        LEX*
        EXTEND_PRIV?
        (EXTEND | EXTEND_PROT)*
      and
        { s' :- s' == s_tgt }
      in s |-> R.

  memberPaths(s, s_tgt) = R :-
    query () 
      filter
        EXTEND*
      and
        { s' :- s' == s_tgt }
      in s |-> R.

  lexicallyVisible(p) :- nonEmpty(lexicalPaths(src(p), dst(p))).
  memberVisible(p)    :- nonEmpty(memberPaths(src(p), dst(p))).

  nonEmpty([_|_]).
  nonEmpty([]) :- false.

rules

  accessModifierToAccess : scope * AccessModifier -> ACCESS
  resolveModRef: scope * ModuleRef -> scope
  resolveModRefs maps resolveModRef(*, list(*)) = list(*)
  modRefOk: scope * scope * ExposureRange * QId
  
  
  [A-Pub]  accessModifierToAccess(s, Public())                   = UNRESTRICTED().
  accessModifierToAccess(s, ProtectedInternal(modRefs)) = subclassOrModules(resolveModRefs(s, modRefs)).
  [A-Int]  accessModifierToAccess(s, Internal(modRefs))          = modules(resolveModRefs(s, modRefs)).
  [A-Prot] accessModifierToAccess(s, Protected())                = subclassOrModules([]).
  accessModifierToAccess(s, PrivateProtected(modRefs))  = subclassInModules(resolveModRefs(s, modRefs)).
  [A-Priv] accessModifierToAccess(s, Private())                  = modules([]).

  resolveModRef(s, Self()) = thisMod(s).
  resolveModRef(s, ModuleRef(qid)) = s_mod :-
    s_mod == resolveMod(s, qid),
    modRefOk(s, s_mod, resolveExposureRange(s), qid).

  modRefOk(s, s_mod, All(), _).
  
  [A-Int'] // Additional condition only
  modRefOk(s, s_mod, Ancestors(), id) :-
    isEnclosingScope(s, s_mod)
    | error $[Not allowed to expose member to non-ancestor module [id].].

rules // lexical target accessible

  lexicalAccessOk               : path * ACCESS
  lexProtectedInternalAccessOk  : PATH_LIST *     LexicalInternal * path * /* exposedModules */scope
  lexInternalAccessOk           : scope * scope * LexicalInternal * path * /* exposedModules */scope
  lexInternalOk					:                 LexicalInternal * path * /* exposedModules */scope

  lexicalAccessOk(p, LOCAL()).
  lexicalAccessOk(p, UNRESTRICTED()) :-
    // The #lexical-internal-access pragma does not influence lexical resolution of public variables
    // If the inheritance chain restricts the visibility (i.e., makes it private), it is implicitly not `internal` anymore.
    lexicallyVisible(p).

  lexicalAccessOk(p, SUBCLASS_OR_MODULES(s_mods)) :- {ps}
    ps == lexicalPaths(src(p), dst(p)),
    lexProtectedInternalAccessOk(ps, resolveLexicalInternal(src(p)), p, s_mods).

  lexicalAccessOk(p, SUBCLASS_IN_MODULES(s_mods)) :-
    lexicallyVisible(p),
    allExposedTo(p, s_mods).

  lexicalAccessOk(p, MODULES(s_mods)) :-
    lexInternalAccessOk(src(p), dst(p), resolveLexicalInternal(src(p)), p, s_mods).


  lexProtectedInternalAccessOk([_|_], _, _, _).
  lexProtectedInternalAccessOk([], LI, p, s_mods) :-
    lexInternalOk(LI, p, s_mods).

  lexInternalAccessOk(s_cls, s_cls, _, _, _).
  lexInternalAccessOk(_, _, LI, p, s_mods) :-
    lexInternalOk(LI, p, s_mods).


  lexInternalOk(AllowLexicalInternal(), p, s_mods) :-
    exposedTo(src(p), s_mods).

  lexInternalOk(IfChainInModule(), p, s_mods) :-
    allExposedTo(p, s_mods).

  lexInternalOk(DenyLexicalInternal(), _, _) :-
    false.

rules // lexical access paths ok

 // TODO: separate from section above

rules // member access

  memberAccessOk       : scope * path * ACCESS
  unrestrictedMemberAccessOk : /* Member paths */PATH_LIST * MemberProtected * scope * path
  subclassOrModulesAccessOk  : /* Member paths */PATH_LIST * /* Exposure paths */PATH_LIST * MemberProtected * scope * path
  subclassInModulesAccessOk  : MemberProtected * scope * path * /*modules*/scope
  moduleMemberAccessOk       : /* Member paths */PATH_LIST * /* Exposure paths */PATH_LIST * MemberProtected * scope * path

  privateMemberAccessOk   : scope * path
  protectedMemberAccessOk : MemberProtected * scope * path
  instanceOfCurrentOk     : MemberProtected * scope * path

  memberAccessOk(s, p, UNRESTRICTED()) :- {MPs}
    MPs == memberPaths(src(p), dst(p)),
    unrestrictedMemberAccessOk(MPs, resolveMemberProtected(s), s, p).

  memberAccessOk(s, p, SUBCLASS_OR_MODULES(mods)) :- {MPs W}
    MPs == memberPaths(src(p), dst(p)),
    W == exposedToModules(s, mods),
    subclassOrModulesAccessOk(MPs, W, resolveMemberProtected(s), s, p).

  memberAccessOk(s, p, SUBCLASS_IN_MODULES(s_mods)) :-
    subclassInModulesAccessOk(resolveMemberProtected(s), s, p, s_mods).

  memberAccessOk(s, p, MODULES(mods)) :- {MPs W}
    MPs == memberPaths(src(p), dst(p)),
    W == exposedToModules(s, mods),
    moduleMemberAccessOk(MPs, W, resolveMemberProtected(s), s, p).


  unrestrictedMemberAccessOk([_|_], _, _, _).

  unrestrictedMemberAccessOk(_, DenyMemberProtected(), _, _) :-
    false.

  unrestrictedMemberAccessOk(_, MP, s, p) :-
    instanceOfCurrentOk(MP, s, p),
    nonEmpty(lexicalPaths(s, dst(p))).


  subclassOrModulesAccessOk([_|_], [_|_], _, _, _).

  subclassOrModulesAccessOk(_, _, MP, s, p) :-
    protectedMemberAccessOk(MP, s, p).


  subclassInModulesAccessOk(DenyMemberProtected(), _, _, _) :-
    false.

  subclassInModulesAccessOk(MP, s, p, s_mods) :- {p' LPs}
    instanceOfCurrentOk(MP, s, p),
    lexicalPaths(s, dst(p)) == [(p', _)|_],
    allExposedTo(p', s_mods).


  moduleMemberAccessOk([_|_], [_|_], _, _, _).

  moduleMemberAccessOk(_, _, DenyMemberProtected(), _, _) :-
    false.

  // member is protected & not exposed.
  moduleMemberAccessOk(_, [], _, s, p) :-
    privateMemberAccessOk(s, p).

  moduleMemberAccessOk(_, _, MP, s, p) :-
    protectedMemberAccessOk(MP, s, p).


  privateMemberAccessOk(s, p) :-
    // Implicitly, `src(p)` will be an instance of `s`, otherwise, no (member) path to `dst(p)` could have been found.
    thisClass(s) == dst(p). // private access

  protectedMemberAccessOk(DenyMemberProtected(), _, _) :- false.
  protectedMemberAccessOk(MP, s, p) :-
    instanceOfCurrentOk(MP, s, p),
    nonEmpty(lexicalPaths(s, dst(p))).

  instanceOfCurrentOk(AllowMemberProtected(), _, _).
  instanceOfCurrentOk(IfInstanceOfCurrent(), s, p) :-
    nonEmpty(subClass(src(p), thisClass(s))).

rules // member access paths ok

  // TODO: separate from above

rules

  allExposedTo : path * scope
  exposedTo: /*s_src*/scope * /*modules*/scope
  exposedToModules: /*s_src*/scope * /*modules*/scope -> PATH_LIST
  isExposedTo: scope * scope * ExposureMode

  allExposedTo(_PathEmpty(_), _). /* same class visibility is always allowed */
  allExposedTo(_PathStep(p, _, s), s_mods) :-
    exposedTo(s, s_mods),
    allExposedTo(p, s_mods).

  exposedTo(s, s_mods) :-
    nonEmpty(exposedToModules(s, s_mods)).

  exposedToModules(s, s_mods) = MS:- {M}
    M == resolveExposureMode(s),

    query ()
      filter MODULE
        and { m :- isExposedTo(s, m, M) }
      in s_mods |-> MS.

  isExposedTo(s, m, DirectChildOnly()) :-
    thisMod(s) == m.

  isExposedTo(s, m, IncludeSubmodules()) :-
    isEnclosingScope(s, m).
