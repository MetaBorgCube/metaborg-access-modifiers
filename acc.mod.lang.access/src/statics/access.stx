module statics/access

imports

  statics/base
  statics/modules
  statics/classes
  statics/options

signature
  sorts PATH_LIST = list((path * scope))

  name-resolution
    labels
      MODULE                // module included in access

  sorts ACCESS constructors
    LOCAL                   :          ACCESS
    UNRESTRICTED            :          ACCESS // PUB in paper
    SUBCLASS_OR_MODULES     : scope -> ACCESS
    SUBCLASS_IN_MODULES     : scope -> ACCESS
    MODULES                 : scope -> ACCESS

  sorts PATHLEVEL constructors
    PRIV_PARENT  : PATHLEVEL
    PRIV_CURRENT : PATHLEVEL
    PROT         : PATHLEVEL
    PUB          : PATHLEVEL

rules

  subclassInModules: list(scope) -> ACCESS
  subclassOrModules: list(scope) -> ACCESS
  modules: list(scope) -> ACCESS

  subclassOrModules(mods) = SUBCLASS_OR_MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  subclassInModules(mods) = SUBCLASS_IN_MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  modules(mods) = MODULES(s_mods) :-
    new s_mods,
    moduleAccessesOk(s_mods, mods).

  moduleAccessOk: scope * scope
  moduleAccessesOk maps moduleAccessOk(*, list(*))

  moduleAccessOk(s, s_mod) :-
    s -MODULE-> s_mod.

rules

  modulesOfAccess: ACCESS -> scope
  // modulesOfAccess(UNRESTRICTED()) = new.
  modulesOfAccess(SUBCLASS_OR_MODULES(s)) = s.
  modulesOfAccess(SUBCLASS_IN_MODULES(s)) = s.
  modulesOfAccess(MODULES(s)) = s.

rules

  pathLevel    : path          -> (PATH_LIST * PATHLEVEL)
  lexicalPaths : scope * scope -> (PATH_LIST * PATHLEVEL)
  nonEmpty : PATH_LIST

  pathLevel(p) = L :- {R}
    L@(R, _) == lexicalPaths(src(p), dst(p)),
    nonEmpty(R).


  lexicalPaths(s, s_tgt) = lexicalPaths_1(s, s_tgt, R) :-
    query ()
      // try public paths first 
      filter
        LEX*
        EXTEND*
      and
        { s' :- s' == s_tgt }
      in s |-> R.
      
    lexicalPaths_1 : scope * scope * PATH_LIST -> (PATH_LIST * PATHLEVEL)
    lexicalPaths_2 : scope * scope * PATH_LIST -> (PATH_LIST * PATHLEVEL)
    lexicalPaths_3 : scope * scope * PATH_LIST -> (PATH_LIST * PATHLEVEL)
    
    lexicalPaths_1(_, _, R@[_|_]) = (R, PUB()).
    lexicalPaths_1(s, s_tgt, []/* <= no public paths */) = lexicalPaths_2(s, s_tgt, R) :-
      query () 
      // try protected paths next 
        filter
          LEX*       
          (EXTEND | EXTEND_PROT)*
        and
          { s' :- s' == s_tgt }
        in s |-> R.
    		
    
    lexicalPaths_2(_, _, R@[_|_]) = (R, PROT()).
    lexicalPaths_2(s, s_tgt, []/* <= no protected paths*/) = lexicalPaths_3(s, s_tgt, R) :-
      // try private paths last
      query () 
        filter
          LEX*
          EXTEND_PRIV
          (EXTEND | EXTEND_PROT)*
        and
          { s' :- s' == s_tgt }
        in s |-> R.
    

    lexicalPaths_3(_, _, R@[_|_]) = (R, PRIV_CURRENT()).
    lexicalPaths_3(s, s_tgt, []/* <= no current private paths*/) = (R, PRIV_PARENT()) :-
      // try private paths last
      query () 
        filter
          LEX*
          (EXTEND | EXTEND_PROT | EXTEND_PRIV)*
        and
          { s' :- s' == s_tgt }
        in s |-> R.


  nonEmpty([_|_]).
  nonEmpty([]) :- false.

  hasLexicalPaths: (PATH_LIST * PATHLEVEL) -> PATH_LIST
  
  hasLexicalPaths((_, PRIV_PARENT())) = [].
  hasLexicalPaths((R, _)) = R.
  
rules

  accessModifierToAccess : scope * AccessModifier -> ACCESS
  resolveModRef: scope * ModuleRef -> scope
  resolveModRefs maps resolveModRef(*, list(*)) = list(*)
  modRefOk: scope * scope * ExposureRange * QId
  
  
  [A-Pub]  accessModifierToAccess(s, Public())                   = UNRESTRICTED().
  accessModifierToAccess(s, ProtectedInternal(modRefs)) = subclassOrModules(resolveModRefs(s, modRefs)).
  [A-Int]  accessModifierToAccess(s, Internal(modRefs))          = modules(resolveModRefs(s, modRefs)).
  [A-Prot] accessModifierToAccess(s, Protected())                = subclassOrModules([]).
  accessModifierToAccess(s, PrivateProtected(modRefs))  = subclassInModules(resolveModRefs(s, modRefs)).
  [A-Priv] accessModifierToAccess(s, Private())                  = modules([]).

  resolveModRef(s, Self()) = thisMod(s).
  resolveModRef(s, ModuleRef(qid)) = s_mod :-
    s_mod == resolveMod(s, qid),
    modRefOk(s, s_mod, resolveExposureRange(s), qid).

  modRefOk(s, s_mod, All(), _).
  
  [A-Int'] // Additional condition only
  modRefOk(s, s_mod, Ancestors(), id) :-
    isEnclosingScope(s, s_mod)
    | error $[Not allowed to expose member to non-ancestor module [id].].

rules // lexical target accessible

  lexicalAccessOk : path * ACCESS
  lexInternalOk	  : LexicalInternal * path * /* exposedModules */scope

  lexicalAccessOk(p, LOCAL()).
  lexicalAccessOk(p, UNRESTRICTED()) :- {L}
    // The #lexical-internal-access pragma does not influence lexical resolution of public variables
    pathLevel(p) == L, // There exists some access path that is valid
    nonEmpty(hasLexicalPaths(L)).

  lexicalAccessOk(p, SUBCLASS_OR_MODULES(s_mods)) :- {L p_lex pic}
    // resolve the paths through with the target declaration can be accessed lexically
    L == lexicalPaths(src(p), dst(p)),
    lexProtectedInternalAccessOk(hasLexicalPaths(L), p, s_mods).
    
      lexProtectedInternalAccessOk  : PATH_LIST * path * /* exposedModules */scope
	  lexProtectedInternalAccessOk([_|_], _, _). // There are paths for which lexical access is permitted.
      lexProtectedInternalAccessOk([], p, s_mods) :- {LI}
        LI == resolveLexicalInternal(src(p)),
        lexInternalOk(LI, p, s_mods).

  lexicalAccessOk(p, SUBCLASS_IN_MODULES(s_mods)) :- {L}
  	// accept is the access path is ok
    pathLevel(p) == L,
    nonEmpty(hasLexicalPaths(L)),
    // ..., and the declaration is accessible along the access path
    allExposedTo(p, s_mods).

  lexicalAccessOk(p, MODULES(s_mods)) :- {L}
    pathLevel(p) == L,
    nonEmpty(hasLexicalPaths(L)),
  	// accept if either
  	// - access occurs in the same class
  	// - access occurs from a module in `s_mods` 
    lexInternalAccessOk(thisClass(src(p)), dst(p), p, s_mods).

      lexInternalAccessOk : scope * scope * path * /* exposedModules */scope
      lexInternalAccessOk(s_cls, s_cls, _, _). // no path check required for access in same class.
      lexInternalAccessOk(_, _, p, s_mods) :- {LI}
        LI == resolveLexicalInternal(src(p)),
        lexInternalOk(LI, p, s_mods).


  lexInternalOk(AllowLexicalInternal(), p, s_mods) :-
    exposedTo(src(p), s_mods).

  lexInternalOk(IfChainInModule(), p, s_mods) :-
    allExposedTo(p, s_mods).

  lexInternalOk(DenyLexicalInternal(), _, _) :-
    false.
    

rules // member access

  memberAccessOk       : scope * path * ACCESS

  memberAccessOk(s, p, UNRESTRICTED()) :- {L}
    // access is allowed with some level
  	pathLevel(p) == L,
  	// the current level allows member access
  	memberPathLevelOk(L, s, p).

  memberAccessOk(s, p, SUBCLASS_OR_MODULES(mods)) :- {L W}
    exposedToModules(s, mods) == W,
    // access is allowed with some level
  	pathLevel(p) == L,
	memberPathLevelOk(L, s, p),
    subclassOrModulesAccessOk(W, s, p).

  	  subclassOrModulesAccessOk  : /* Exposure paths */PATH_LIST * scope * path

	  // Accept if the variable is not protected by the instance
	  // and the definition is exposed to the current module.
	  subclassOrModulesAccessOk([_|_], _, _).
	
	  // Member access is not allowed as `internal`, check if it can be accessed as `protected` instead.
	  subclassOrModulesAccessOk(_, s, p) :-
	    // member access of protected member should be allowed
	    protectedMemberAccessOk(resolveMemberProtected(s), s, p).

  memberAccessOk(s, p, SUBCLASS_IN_MODULES(mods)) :- {L W}
    exposedToModules(s, mods) != [],
	// member access of protected member should be allowed
	protectedMemberAccessOk(resolveMemberProtected(s), s, p),
  	pathLevel(p) == L,
	memberPathLevelOk(L, s, p).

  memberAccessOk(s, p, MODULES(mods)) :- {L MDs}
    pathLevel(p) == L,
	memberPathLevelOk(L, s, p),
    exposedToModules(s, mods) == MDs,
    modulesAccessOk(MDs, s, p).

      modulesAccessOk : PATH_LIST * scope * path

      modulesAccessOk([_|_], _, _).
      modulesAccessOk([], s, p) :-
	    // member access of 'private' member should be allowed
  	    privateMemberAccessOk(resolveMemberPrivate(s), s, /* private in declaration scope */ dst(p), p).


rules // path validation

  memberPathLevelOk: (PATH_LIST * PATHLEVEL) * /*s ref*/scope * path

  memberPathLevelOk((_, PUB()), _, _).

  memberPathLevelOk((_, PROT()), s, p) :-
    protectedMemberAccessOk(resolveMemberProtected(s), s, p).
  
  memberPathLevelOk((_, _), s, p) :- {s_this}
    s_this == thisClass(s),
    // must be private in this very class (not necessarily in reference class)
    privateInCurrent(s_this, dst(p)),
    privateMemberAccessOk(resolveMemberPrivate(s), s, s_this, p).
	

  protectedMemberAccessOk : MemberProtected * scope * path
  
  protectedMemberAccessOk(DenyMemberProtected(), _, _) :- false.

  protectedMemberAccessOk(AllowMemberProtected(), s, p) :-
    nonEmpty(subClass(thisClass(s), dst(p))).

  protectedMemberAccessOk(IfInstanceOfCurrent(), s, p) :-
    try { false } | note $[[s] |- [p]],
    nonEmpty(subClass(thisClass(s), dst(p))),
    nonEmpty(subClass(src(p), thisClass(s))).

  privateInCurrent: scope * scope

  privateInCurrent(s_inst, s_decl) :- {R}
    query ()
      filter
        LEX*
        EXTEND_PRIV
        (EXTEND | EXTEND_PROT)*
      and
        { s' :- s' == s_decl }
      in s_inst |-> R,
    nonEmpty(R).


  privateMemberAccessOk   : MemberPrivate * scope * scope * path

  privateMemberAccessOk(DenyMemberPrivate(), _, _, _) :- false.

  privateMemberAccessOk(IfExactType(), s_ref, s_priv, p) :-
    s_priv == thisClass(s_ref), // access must occur in the class in which the reference is private
    s_priv == src(p).			// instance of var must be scope in which it is private 

  privateMemberAccessOk(IfSubtypeOfCurrent(), s_ref, s_priv, p) :-
    s_priv == thisClass(s_ref), 			// access must occur in the class in which the reference is private
    nonEmpty(subClass(src(p), s_priv)).		// instance of var must be a subclass of the class in which the variable is private


rules

  allExposedTo : path * scope
  exposedTo: /*s_src*/scope * /*modules*/scope
  exposedToModules: /*s_src*/scope * /*modules*/scope -> PATH_LIST
  isExposedTo: scope * scope * ExposureMode

  allExposedTo(_PathEmpty(_), _). /* same class visibility is always allowed */
  allExposedTo(_PathStep(p, _, s), s_mods) :-
    exposedTo(s, s_mods),
    allExposedTo(p, s_mods).

  exposedTo(s, s_mods) :-
    nonEmpty(exposedToModules(s, s_mods)).

  exposedToModules(s, s_mods) = MS:- {M}
    M == resolveExposureMode(s),

    query ()
      filter MODULE
        and { m :- isExposedTo(s, m, M) }
      in s_mods |-> MS.

  isExposedTo(s, m, DirectChildOnly()) :-
    thisMod(s) == m.

  isExposedTo(s, m, IncludeSubmodules()) :-
    isEnclosingScope(s, m).
