module statics/classes

imports

  signatures/lib/start-sig

  statics/base
  statics/access
  statics/types
  statics/variables
  statics/methods
  statics/expressions
  statics/modules

signature

  relations
    class: ID -> scope
    thisClass: scope
    thisName: ID
    extends: ID // track double extension

rules

  declareClass: scope * ID * scope
  resolveClass: scope * ID -> list((path * (ID * scope)))
  resolveLocalClass: scope * ID -> list((path * (ID * scope)))

  declareClass(s, x, s_cls) :-
    !class[x, s_cls] in s,
    !thisClass[s_cls] in s_cls,
    !thisName[x] in s_cls,
    resolveLocalClass(s, x) == [_]
      | error $[Duplicate Declaration of Class [x].].

  resolveClass(s, x) = R :-
    query class
      filter LEX* IMPORT?
        and { x' :- x' == x }
      min
        $ < LEX, LEX < IMPORT
      in s |-> R.

  resolveLocalClass(s, x) = R :-
    query class
      filter e
        and { x' :- x' == x }
      in s |-> R.

rules

  scopeOfClassRef: scope * ID -> scope
  scopeOfClassRef(s, x) = s_cls :- {x'}
    resolveClass(s, x) == [(_, (x', s_cls)) | _],
    @x.ref := x'.

rules

  thisClass: scope -> scope
  thisClass(s) = s_cls :-
    query thisClass
      filter LEX*
      min $ < LEX
      in s |-> [(_, s_cls) | _].

rules

  subClass: scope * scope -> list((path * scope))
  subClass(s_cls, s_prnt) = R :-
    query ()
      filter
        (EXTEND | EXTEND_PROT | EXTEND_PRIV)*
      and
        { s_prnt' :- s_prnt' == s_prnt }
      in s_cls |-> R.

rules

  classOk: scope * Class
  classOk(s, Class(x, extends, members)) :- {s_cls}
    new s_cls,
    declareClass(s, x, s_cls),
    
    s_cls -LEX-> s,

    extendsOk(s_cls, extends),   
    membersOk(s_cls, members).

    
rules

  extendsOk: scope * Extends
  extendsClauseOk: scope * ExtendsClause
  extendsClausesOk maps extendsClauseOk(*, list(*))
  extends: AccessModifier * scope * scope
  noDuplExtend: scope * scope * ID

  extendsOk(_, NoExtends()).
  extendsOk(s_cls, Extends(clauses)) :-    
    extendsClausesOk(s_cls, clauses).

  extendsClauseOk(s_cls, ExtendsClause(acc, x)) :- {s_tgt}
    scopeOfClassRef(s_cls, x) == s_tgt,
    noDuplExtend(s_cls, s_tgt, x),
    extends(acc, s_cls, s_tgt).

  extends(Public(), s_cls, s_tgt) :-
    s_cls -EXTEND-> s_tgt.

  extends(Protected(), s_cls, s_tgt) :-
    s_cls -EXTEND_PROT-> s_tgt.

  extends(Private(), s_cls, s_tgt) :-
    s_cls -EXTEND_PRIV-> s_tgt.

  extends(acc, s_cls, s_tgt) :-
    false | error $[Invalid access modifier: only 'public', 'private' and 'protected' are allowed.],
    s_cls -EXTEND-> s_tgt.

  noDuplExtend(s, s_tgt, x) :-
    subClass(s_tgt, s) == []
      | error $[Cyclic Inheritance],
    // Cannot use `subClass(s, s_tgt) == [_]`, because then equal extends clauses `: public C, public C` are not detected.
    !extends[x] in s,
    query extends
      filter e and { x' :- x' == x } in s |-> [_]
      | error $[Extending [x] multiple times.].

rules

  memberOk: scope * MemberDecl
  membersOk maps memberOk(*, list(*))

  memberOk(s_cls, Field(acc, x, init)) :- {T}
    typeOfExpr(s_cls, init) == T,
    fieldDeclOk(s_cls, acc, x, T).

  memberOk(s_cls, Method(acc, mth, x, args, stmts, ret_exp)) :- 
    {s_mthd Ts T_ret ACC}
      new s_mthd,
      s_mthd -LEX-> s_cls,
    
      argumentsOk(s_mthd, args) == Ts,
    
      typeOfExpr(s_mthd, ret_exp) == T_ret,
      
      stmtsOk(s_mthd, stmts),
      
      ACC == accessModifierToAccess(s_cls, acc),
      
      methodModOk(s_cls, acc, ACC, mth, x, Ts, T_ret),
    
      methodDeclOk(s_cls, ACC, x, Ts, T_ret).

rules

  fieldDeclOk: scope * AccessModifier * ID * TYPE

  fieldDeclOk(s, acc, x, T) :-
    declareVar(s, x, T, accessModifierToAccess(s, acc)).

rules

  argumentOk : scope * Arg -> TYPE
  argumentsOk maps argumentOk(*, list(*)) = list(*)

  argumentOk(s, Arg(x, t)) = T :-
    typeOfType(s, t) == T,
    declareVar(s, x, T, LOCAL()).

rules

  stmtOk : scope * Stmt
  stmtsOk maps stmtOk(*, list(*))

  stmtOk(s, ExprStmt(exp)) :-
    typeOfExpr(s, exp) == _.

  stmtOk(s, Assign(recv, exp)) :- {T_recv T_exp}
    typeOfLHS(s, recv) == T_recv,
    typeOfExpr(s, exp) == T_exp,
    subtype(T_recv, T_exp).
