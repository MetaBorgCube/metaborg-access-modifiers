module statics/expressions

imports

  signatures/lib/start-sig

  statics/base
  statics/access
  statics/modules
  statics/classes
  statics/variables
  statics/methods

rules

  typeOfLHS : scope * LHS  -> TYPE
  typeOfExpr: scope * Expr -> TYPE
  typesOfExprs maps typeOfExpr(*, list(*)) = list(*)

  typeOfLHS(s, Var(qid)) = resolveVar(s, qid).

  typeOfExpr(s, LHS2Expr(lhs)) = typeOfLHS(s, lhs).

  typeOfExpr(s, NewInstance(x)) = CLASS(scopeOfClassRef(s, x)).

  typeOfExpr(_, IntLit(_)) = INT().

  typeOfExpr(s, Plus(e1, e2)) = INT() :-
    typeOfExpr(s, e1) == INT(),
    typeOfExpr(s, e2) == INT().

  typeOfExpr(s, Invoke(x, args)) = T_ret :- {T_formal T_actual p ACC}
    resolveLexicalMethod(s, x) == (p, (METHOD(T_formal, T_ret), ACC)),
    lexicalAccessOk(p, ACC)
      | error $[Method [x] is not visible.],
    typesOfExprs(s, args) == T_actual,
    allCovariant(T_formal, T_actual).

  typeOfExpr(s, QInvoke(recv, x, args)) = T_ret :- {s_cls T_formal T_actual p ACC}
    typeOfExpr(s, recv) == CLASS(s_cls),
    resolveMemberMethod(s_cls, x) == (p, (METHOD(T_formal, T_ret), ACC)),
    memberAccessOk(s, p, ACC)
      | error $[Method [x] is not visible.],
    typesOfExprs(s, args) == T_actual,
    allCovariant(T_formal, T_actual).
