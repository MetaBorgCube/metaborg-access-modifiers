name = "AccModLangAccess"
java-class-id-prefix = java AccModLangAccess
file-extension = "aml2"

sdf3 {}
esv {}
statix {}
stratego {}

parser {
  default-start-symbol = sort Start
}
styler {}
constraint-analyzer {
  default-statix-message-stacktrace-length = 8
}
stratego-runtime {}
reference-resolution {
  variant = stratego {
    strategy = strategy editor-resolve
  }
}
hover {
  variant = stratego {
    strategy = strategy editor-hover
  }
}

// Code completion
tego-runtime {}
code-completion {}


build-dependencies [
  org.metaborg:strategolib:*
  org.metaborg:gpp:*
  org.metaborg:libspoofax2:*
  org.metaborg:libstatix:*
  ../acc.mod.lang
]


// Code Completion task

let prependOffset = task-def mb.acc.mod.lang.access.tasks.cc.PrependOffset
let desugarAll = task-def mb.acc.mod.lang.access.tasks.cc.DesugarAll
let analysisHasErrors = task-def mb.acc.mod.lang.access.tasks.cc.AnalysisHasErrors
let accModToPlaceHolder = task-def mb.acc.mod.lang.access.tasks.cc.AccModToPlaceHolder
let tailToPlaceHolder = task-def mb.acc.mod.lang.access.tasks.cc.TailToPlaceHolder
let accModAtOffset = task-def mb.acc.mod.lang.access.tasks.cc.AccModAtOffset
let completeTransformed = task-def mb.acc.mod.lang.access.tasks.cc.CompleteTransformed
let completeToCurrentTaskDef = task-def mb.acc.mod.lang.access.tasks.cc.CompleteToCurrent

let completeToCurrentCommand = command-def {
  task-def = completeToCurrentTaskDef
  display-name = "Test Complete To Current"
  parameters = [
    selection {
      type = java mb.common.region.Region
      required = true
      argument-providers = [Context(Region)]
    }
    file {
      type = java mb.resource.ResourceKey
      required = true
      argument-providers = [Context(File)]
    }
    rootDirectory {
      type = java mb.resource.hierarchical.ResourcePath
      required = true
      argument-providers = [EnclosingContext(Project)]
    }
  ]
}

let completeToCurrentMenuItem = command-action {
  command-def = completeToCurrentCommand
  execution-type = Once
  required-resource-types = [File]
  required-enclosing-resource-types = [Project]
}


// Java Compatibility
let compatArgsType = java mb.acc.mod.lang.access.tasks.TestCompat.Args

let insertJavaSettings = task-def mb.acc.mod.lang.access.tasks.tojava.InsertJavaSettings
let transformToJavaTask = task-def mb.acc.mod.lang.access.tasks.tojava.TransformToJava
let testJavaCompatTask = task-def mb.acc.mod.lang.access.tasks.tojava.TestJavaCompat

let testJavaCompatCommand = command-def {
  task-def = testJavaCompatTask
  display-name = "Test Java Compatibility"
  args-type = compatArgsType
  parameters = [
    file {
      type = java mb.resource.ResourceKey
      required = true
      argument-providers = [Context(File)]
    }
    rootDirectory {
      type = java mb.resource.hierarchical.ResourcePath
      required = true
      argument-providers = [EnclosingContext(Project)]
    }
  ]
}

let testJavaCompatMenuItem = command-action {
  command-def = testJavaCompatCommand
  execution-type = Once
  required-resource-types = [File]
  required-enclosing-resource-types = [Project]
}

// C# Compatibility
let insertCSharpSettings = task-def mb.acc.mod.lang.access.tasks.tocsharp.InsertCSharpSettings
let transformToCSharpTask = task-def mb.acc.mod.lang.access.tasks.tocsharp.TransformToCSharp
let testCSharpCompatTask = task-def mb.acc.mod.lang.access.tasks.tocsharp.TestCSharpCompat


let testCSharpCompatCommand = command-def {
  task-def = testCSharpCompatTask
  display-name = "Test C# Compatibility"
  args-type = compatArgsType
  parameters = [
    file {
      type = java mb.resource.ResourceKey
      required = true
      argument-providers = [Context(File)]
    }
    rootDirectory {
      type = java mb.resource.hierarchical.ResourcePath
      required = true
      argument-providers = [EnclosingContext(Project)]
    }
  ]
}

let testCSharpCompatMenuItem = command-action {
  command-def = testCSharpCompatCommand
  execution-type = Once
  required-resource-types = [File]
  required-enclosing-resource-types = [Project]
}

editor-context-menu [
  menu "Transform" [
    completeToCurrentMenuItem
    testJavaCompatMenuItem
    testCSharpCompatMenuItem
  ]
]

resource-context-menu [
  menu "Transform" [
    completeToCurrentMenuItem
    testJavaCompatMenuItem
    testCSharpCompatMenuItem
  ]
]