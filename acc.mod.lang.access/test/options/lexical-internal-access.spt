module options/lexical-internal-access

// *** internal ***

// Inside module

test inside -- allow [[
#lexical-internal-access: allow

module p {
  class A {
    internal var x = 42
  }
  class B : public A {
    private var y = x
  }
}
]]
// `A.x` is internal, and due to the setting it can be accessed lexically from a sub-class
analysis succeeds

test inside -- if-chain-in-module [[
#lexical-internal-access: if-chain-in-module

module p {
  class A {
    internal var x = 42
  }
  class B : public A {
    private var y = x
  }
}
]]
// `A.x` is internal and `B` lives in the same package.
// Due to the setting it can be accessed lexically from a sub-class
analysis succeeds

test inside -- deny [[
#lexical-internal-access: deny

module p {
  class A {
    internal var x = 42
  }
  class B : public A {
    private var y = x
  }
}
]]
// `A.x` is internal, but due to the setting it cannot be accessed lexically from a sub-class
analysis fails

// Crossing module boundaries

test outside -- allow [[
#lexical-internal-access: allow

module p {
  import q
  class A {
    internal var x = 42
  }
  class C : public B {
    private var y = x
  }
}

module q {
  import p
  class B : public A { }
}
]]
// `A.x` is internal, and `C` lives in the same module
// Due to the setting it can be accessed lexically from `C`
analysis succeeds

test outside -- if-chain-in-module [[
#lexical-internal-access: if-chain-in-module

module p {
  import q
  class A {
    internal var x = 42
  }
  class C : public B {
    private var y = x
  }
}

module q {
  import p
  class B : public A { }
}
]]
// `A.x` is internal, and `C` lives in the same module; but `B` does not
// Due to the setting it cannot be accessed lexically from `C`
analysis fails

test outside -- deny [[
#lexical-internal-access: deny

module p {
  import q
  class A {
    internal var x = 42
  }
  class C : public B {
    private var y = x
  }
}

module q {
  import p
  class B : public A { }
}
]]
// `A.x` is internal
// Due to the setting it cannot be accessed lexically from `C`
analysis fails


// *** protected internal ***
// Inside module

test inside -- allow [[
#lexical-internal-access: allow

module p {
  class A {
    protected internal var x = 42
  }
  class B : private A { }
  class C : public B {
    private var y = x
  }
}
]]
// `A.x` is protected (OR) internal. It is hidden from `C` by private inheritance in `B` 
// Due to the setting it can be accessed lexically from `C` due to being internal.
analysis succeeds

test inside -- if-chain-in-module [[
#lexical-internal-access: if-chain-in-module

module p {
  class A {
    protected internal var x = 42
  }
  class B : private A { }
  class C : public B {
    private var y = x
  }
}
]]
// `A.x` is protected (OR) internal. It is hidden from `C` by private inheritance in `B` 
// Due to the setting (and all classes being in the same module) it can be accessed lexically from `C` due to being internal.
analysis succeeds

test inside -- deny [[
#lexical-internal-access: deny

module p {
  class A {
    protected internal var x = 42
  }
  class B : private A { }
  class C : public B {
    private var y = x
  }
}
]]
// `A.x` is protected (OR) internal. It is hidden from `C` by private inheritance in `B` 
// Due to the setting (and all classes being in the same module) it cannot be accessed lexically from `C` due to being internal.
analysis fails

// Crossing module boundaries

test outside -- allow [[
#lexical-internal-access: allow

module p {
  import q
  class A {
    protected internal var x = 42
  }
  class B : private A { }
  class D : public C {
    private var y = x
  }
}

module q {
  import p
  class C : public B { }
}
]]
// `A.x` is protected (OR) internal. It is hidden from `D` by private inheritance in `B`. Part of the inheritance chain is outside the module.
// Due to the setting it can be accessed lexically from `D` due to being internal.
analysis succeeds

test outside -- if-chain-in-module [[
#lexical-internal-access: if-chain-in-module

module p {
  import q
  class A {
    protected internal var x = 42
  }
  class B : private A { }
  class D : public C {
    private var y = x
  }
}

module q {
  import p
  class C : public B { }
}
]]
// `A.x` is protected (OR) internal. It is hidden from `D` by private inheritance in `B`. Part of the inheritance chain is outside the module.
// Due to the setting (and `C` being outside the module) it cannot be accessed lexically from `D` due to being internal.
analysis fails

test outside -- if-chain-in-module - protected [[
#lexical-internal-access: if-chain-in-module

module p {
  import q
  class A {
    protected internal var x = 42
  }
  class B : public A { }
  class D : public C {
    private var y = x
  }
}

module q {
  import p
  class C : public B { }
}
]]
// `A.x` is protected (OR) internal. Part of the inheritance chain is outside the module.
// It can be accessed lexically from `D` due to being protected.
analysis succeeds

test outside -- deny [[
#lexical-internal-access: deny

module p {
  import q
  class A {
    protected internal var x = 42
  }
  class B : private A { }
  class D : public C {
    private var y = x
  }
}

module q {
  import p
  class C : public B { }
}
]]
// `A.x` is protected (OR) internal. It is hidden from `D` by private inheritance in `B`. Part of the inheritance chain is outside the module.
// Due to the setting it cannot be accessed lexically from `D` due to being internal.
analysis fails

